//code adapted from Galloway et al. 2019
//J. Galloway, W. A. Cresko, P. Ralph, A Few Stickleback Suffice for the Transport of Alleles to New Lakes. G3: Genes, Genomes, Genetics. 10, 505â€“514 (2019).

//return the frequecies for a set of mutations among a given set of individuals
function (void)recordNumberOfFWAAPerMarineInd(void){

	m1s = sim.mutationsOfType(m1);			
	m2s = sim.mutationsOfType(m2);			
	m4s = sim.mutationsOfType(m4);			
	m5s = sim.mutationsOfType(m5);			
	m6s = sim.mutationsOfType(m6);			
	m7s = sim.mutationsOfType(m7);			

	effectMutations = c(m1s,m2s,m4s,m5s,m6s,m7s);	

	highFreqAlleles = getHighFreqFreshAlleles(p2,effectMutations);
	freshwaterAdaptedAlleles = unique(highFreqAlleles);
	marineGenomes = p1.individuals.genomes;

	numFWAAPerMarineIndividual = rep(0,IIO * 2);
	iter = 0; 
	for (g in marineGenomes){

		num = sum(g.containsMutations(freshwaterAdaptedAlleles));
		numFWAAPerMarineIndividual[iter] = num;
		iter = iter + 1;
	}

	writeFile(PATH+"FWAAPerMarineIndCounts",paste(numFWAAPerMarineIndividual),append = T);
	
	return;

}

//--RECORD THE EFFECT MUTATION FREQUENCIES IN ALL POPS--
function (void)recordFrequencies(o<Mutation> mutations, string filename){

	if(sim.generation == INP){
		writeFile(PATH+filename,"#",append = T);
	}

	Ids = mutations.id;
	writeFile(PATH+filename,paste(Ids),append = T);	
	freq1 = sim.mutationFrequencies(p1,mutations);
	freq2 = sim.mutationFrequencies(p2,mutations);
	writeFile(PATH+filename,paste(freq1),append = T);
	writeFile(PATH+filename,paste(freq2),append = T);

	if(sim.generation >= INP){
		for (i in 1:NLAKES){
			freq3 = sim.mutationFrequencies(sim.subpopulations[i+1],mutations);
			writeFile(PATH+filename,paste(freq3),append = T);
		}
		
	}
	
	return;

}

//--RECORD 1. AVG NUMBER OF LAKES EACH FWAA ALLELE APPEARS IN 2. AVG NUMBER OF FWAA / MARINE IND 3. NUM FWAA 
function (void)recordFreshAdaptedAlleles(o<Mutation> mutations){

	highFreqAlleles = getHighFreqFreshAlleles(p2,mutations);
	freshwaterAdaptedAlleles = unique(highFreqAlleles);
	avgSharedAlleles = size(highFreqAlleles) / size(freshwaterAdaptedAlleles);
	avgSharedAlleles[isNAN(avgSharedAlleles)] = 0;


	freqInMarine = sim.mutationFrequencies(p1,freshwaterAdaptedAlleles);	
	avgFreshAllelesPerMarineInd = sum(freqInMarine);

	writeFile(PATH+"AvgNumLakesFreshAlleleAppearsIn.txt",asString(avgSharedAlleles),append = T);
	writeFile(PATH+"AvgFreshAllelesPerMarineInd.txt",asString(avgFreshAllelesPerMarineInd),append = T);
	writeFile(PATH+"numfreshAlleles.txt",asString(size(freshwaterAdaptedAlleles)),append=T);

	return;

}

//--RECORD THE SGV IN A POPULATION
function (void)recordStandingGeneticVariation(o<Subpopulation> subpop, o<Mutation> mutations){

	sgv_s = NULL;

	for (sub in subpop){		

		numEffMuts = size(mutations);
		total = 0;

		for (ef in mutations){
			s = ef.selectionCoeff;
			p = sim.mutationFrequencies(sub,ef);
			additiveGeneticVariance = (s*s)*(p)*(1-p);
			total = total + additiveGeneticVariance;
		}

		sgv = total/numEffMuts;
		sgv_s = c(sgv_s,sgv);
	}

	writeFile(PATH+"StandingGeneticVariationThroughout.txt",paste(sgv_s),append = T);
	return;

}

//--SAMPLE PHENOTYPE
function (void) samplePhenotype (void){
		
		lake_phenos = NULL;		

		for (i in 1:NLAKES)
		{
			//Pheno sampling	
			
			locationOfLake = (i - 0.5);
			lake_individuals = p2.individuals[abs(p2.individuals.spatialPosition - locationOfLake) < 1e-8];
			lake_mean_pheno = mean(lake_individuals.tagF);
			lake_phenos = c(lake_phenos,lake_mean_pheno);			
		}
		
	
		orig_lake_phenos_string = "";
		
		for (i in 0:(NLAKES-1))
		{
			orig_lake_phenos_string = orig_lake_phenos_string+asString(lake_phenos[i])+" ";
		}

		if (sim.generation >= INP){

					
			lake_phenos = NULL;
			
			for (i in 1:NLAKES)
			{
				//Pheno sampling	
				pop = sim.subpopulations[i+1];
				lake_individuals = pop.individuals;
				lake_mean_pheno = mean(lake_individuals.tagF);
				lake_phenos = c(lake_phenos,lake_mean_pheno);			
			}
			
		
			intro_lake_phenos_string = "";
			intro_lake_phenos_string+asString(lake_phenos)+" ";
			
			for (i in 0:(NLAKES-1))
			{
				intro_lake_phenos_string = intro_lake_phenos_string+asString(lake_phenos[i])+" ";
			}
				
			writeFile(PATH+"AveragePhenotypeThroughout.txt",sim.getValue("MAP")+" "+sim.getValue("FAP")+" "+orig_lake_phenos_string+" "+sim.getValue("IAP")+" "+intro_lake_phenos_string,append = T);
		}else{
			writeFile(PATH+"AveragePhenotypeThroughout.txt",sim.getValue("MAP")+" "+sim.getValue("FAP")+" "+orig_lake_phenos_string,append = T);
		}

		return;

}


//--WRITE MUTATIONS FOR EACH MARINE INDIVIDUAL
function (void)WriteMutationsperMarineIndv(void){
	
	// mutations in marine population
	for (i in  0:(size(p1.individuals)-1)){
		Ids1 = p1.individuals[i].genome1.mutations.id;
		Ids2 = p1.individuals[i].genome2.mutations.id;
		writeFile(PATH+"MutationsperMarineIndv.txt",paste(Ids1),append = T);	
		writeFile(PATH+"MutationsperMarineIndv.txt",paste(Ids2),append = T);	
	}
	return;
}

//-WRITE MUTATIONS FOR EACH COLONISED INDIVIDUAL
function (void)WriteMutationsperColIndv(void){
	
	// mutations in each individual of each colonised freshwater population 
	if(sim.generation >= INP){
		for (i in 1:NLAKES){
			pop = sim.subpopulations[i+1];
			writeFile(PATH+"MutationsperColIndv.txt",paste(pop),append = T);	
			for (i in  0:(size(pop.individuals)-1)){
				Ids1 = pop.individuals[i].genome1.mutations.id;
				Ids2 = pop.individuals[i].genome2.mutations.id;
				writeFile(PATH+"MutationsperColIndv.txt",paste(Ids1),append = T);
				writeFile(PATH+"MutationsperColIndv.txt",paste(Ids2),append = T);
			}
		}	
	}
	
	return;
}


//-WRITE INFORMATION FOR EACH FRESHWATER MUTATION IN EACH (SAMPLED) GENERATION

function (void)WriteFreshwaterMutations(void){


		m2s = sim.mutationsOfType(m2);					
		m5s = sim.mutationsOfType(m5);			
		m7s = sim.mutationsOfType(m7);			
		
		effectMutations = c(m2s,m5s,m7s);
		Ids = effectMutations.id;
		positions = effectMutations.position;
		origin = effectMutations.subpopID;
		selectCoeff = effectMutations.selectionCoeff;
		age = (rep(sim.generation,size(effectMutations))) - (effectMutations.originGeneration);
		type = effectMutations.mutationType;
		newType = rep("",size(type));
		
		for (i in 0:(size(type)-1)){
			if (type[i] == m2){newType[i] = 2;}			
			else if (type[i] == m5){newType[i] = 5;}
			else if (type[i] == m7){newType[i] = 7;}			
			else {newType[i] = 0;}		
		}
		
		writeFile(PATH+"FreshwaterMutations.txt",paste(Ids),append = T);		
		writeFile(PATH+"FreshwaterMutations.txt",paste(positions),append = T);
		writeFile(PATH+"FreshwaterMutations.txt",paste(age),append = T);
		writeFile(PATH+"FreshwaterMutations.txt",paste(origin),append = T);
		writeFile(PATH+"FreshwaterMutations.txt",paste(selectCoeff),append = T);
		writeFile(PATH+"FreshwaterMutations.txt",paste(newType),append = T);

		return;

}


//-WRITE INFORMATION FOR EACH EFFECTIVE MUTATION IN EACH (SAMPLED) GENERATION
function (void)WriteEffectMutations(void){


		m1s = sim.mutationsOfType(m1);			
		m2s = sim.mutationsOfType(m2);			
		m4s = sim.mutationsOfType(m4);			
		m5s = sim.mutationsOfType(m5);			
		m6s = sim.mutationsOfType(m6);			
		m7s = sim.mutationsOfType(m7);		
		
		effectMutations = c(m1s,m2s,m4s,m5s,m6s,m7s);
		Ids = effectMutations.id;
		positions = effectMutations.position;
		origin = effectMutations.subpopID;
		selectCoeff = effectMutations.selectionCoeff;
		age = (rep(sim.generation,size(effectMutations))) - (effectMutations.originGeneration);
		type = effectMutations.mutationType;
		newType = rep("",size(type));

		for (i in 0:(size(type)-1)){
			if (type[i] == m1){newType[i] = 1;}		
			else if (type[i] == m2){newType[i] = 2;}		
			else if (type[i] == m4){newType[i] = 4;}		
			else if (type[i] == m5){newType[i] = 5;}		
			else if (type[i] == m6){newType[i] = 6;}		
			else if (type[i] == m7){newType[i] = 7;}
			else {newType[i] == 0;}	
		}
		
		writeFile(PATH+"EffectMutations.txt",paste(Ids),append = T);
		writeFile(PATH+"EffectMutations.txt",paste(positions),append = T);
		writeFile(PATH+"EffectMutations.txt",paste(age),append = T);
		writeFile(PATH+"EffectMutations.txt",paste(origin),append = T);
		writeFile(PATH+"EffectMutations.txt",paste(selectCoeff),append = T);
		writeFile(PATH+"EffectMutations.txt",paste(newType),append = T);

		return;

}


function (void)AdaptationSampling(void){

		//record time it took to adapt
		timeToAdaptation = sim.generation - INP;			

		
		m1s = sim.mutationsOfType(m1);			
		m2s = sim.mutationsOfType(m2);			
		m4s = sim.mutationsOfType(m4);			
		m5s = sim.mutationsOfType(m5);			
		m6s = sim.mutationsOfType(m6);			
		m7s = sim.mutationsOfType(m7);			

		allMutations = sim.mutations;
		effectMutations = c(m1s,m2s,m4s,m5s,m6s,m7s);
		//neutralMutations = sim.mutationsOfType(m3);		
		
		//get high frequency alleles in original lakes
		highFreqAllelesInOrig = getHighFreqFreshAlleles(p2,effectMutations);
		FWAA_P2 = unique(highFreqAllelesInOrig);

		//get high frequency alleles in introduced lakes
		highFreqAllelesInIntro = getHighFreqFreshAlleles(p3,effectMutations);
		FWAA_P3 = unique(highFreqAllelesInIntro);
		
		numberOfSharedFWAA = sum(match(FWAA_P2.id,FWAA_P3.id) >= 0);

		totalNumOfFWAA = size(unique(c(FWAA_P2,FWAA_P3)));

		freqFWAA_P2InP2 = sim.mutationFrequencies(p2,FWAA_P2);
		freqFWAA_P2InP3 = sim.mutationFrequencies(p3,FWAA_P2);
		
		corFWAA_P2_freqs = cor(freqFWAA_P2InP2,freqFWAA_P2InP3);	
		
		freqEffectInP2 = sim.mutationFrequencies(p2,effectMutations);	
		freqEffectInP3 = sim.mutationFrequencies(p3,effectMutations);

		corEffect_freqs = cor(freqEffectInP2,freqEffectInP3);
			
		writeFile(PATH+"Adaptation.txt",paste(FWAA_P2.id),append = T);
		writeFile(PATH+"Adaptation.txt",paste(FWAA_P3.id),append = T);
		writeFile(PATH+"Adaptation.txt",asString(timeToAdaptation),append = T);
		writeFile(PATH+"Adaptation.txt",asString(numberOfSharedFWAA),append = T);
		writeFile(PATH+"Adaptation.txt",asString(totalNumOfFWAA),append = T);
		writeFile(PATH+"Adaptation.txt",asString(corFWAA_P2_freqs),append = T);
		writeFile(PATH+"Adaptation.txt",asString(corEffect_freqs),append = T);

}

function (void)MeanPreExistingFAA_PerIndividual(o<Mutation> effectMutations){ 

		highFreqAlleles = getHighFreqFreshAlleles(p2,effectMutations);
		FWAA_P2 = unique(highFreqAlleles);

		numFWAA_P2 = size(FWAA_P2);

		avgFWAAinMarine = sum(sim.mutationFrequencies(p1,FWAA_P2));
		avgFWAAinOrigFresh = sum(sim.mutationFrequencies(p2,FWAA_P2));
		avgFWAAinIntroFresh = sum(sim.mutationFrequencies(p3,FWAA_P2));

		writeFile(PATH+"avgFWAA.txt",paste(c(avgFWAAinMarine,avgFWAAinOrigFresh,avgFWAAinIntroFresh)),append = T);

		PercentFWAAinMarine = avgFWAAinMarine / numFWAA_P2;
		PercentFWAAinOrigFresh = avgFWAAinOrigFresh / numFWAA_P2;
		PercentFWAAinIntroFresh = avgFWAAinIntroFresh / numFWAA_P2;

		if (!numFWAA_P2 == 0){	
			writeFile(PATH+"avgFWAA_divTotal.txt",paste(c(PercentFWAAinMarine,PercentFWAAinOrigFresh,PercentFWAAinIntroFresh)),append = T);	
		}else{
			writeFile(PATH+"avgFWAA_divTotal.txt",paste(c(0,0,0)),append = T);
		}

}